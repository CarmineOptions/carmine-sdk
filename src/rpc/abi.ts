// Auto-generated by generateABI.ts
export const abi = [
  {
    type: "impl",
    name: "Amm",
    interface_name: "carmine_protocol::amm_interface::IAMM",
  },
  {
    type: "enum",
    name: "core::bool",
    variants: [
      {
        name: "False",
        type: "()",
      },
      {
        name: "True",
        type: "()",
      },
    ],
  },
  {
    type: "struct",
    name: "cubit::f128::types::fixed::Fixed",
    members: [
      {
        name: "mag",
        type: "core::integer::u128",
      },
      {
        name: "sign",
        type: "core::bool",
      },
    ],
  },
  {
    type: "struct",
    name: "core::integer::u256",
    members: [
      {
        name: "low",
        type: "core::integer::u128",
      },
      {
        name: "high",
        type: "core::integer::u128",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::option_::Option_",
    members: [
      {
        name: "option_side",
        type: "core::integer::u8",
      },
      {
        name: "maturity",
        type: "core::integer::u64",
      },
      {
        name: "strike_price",
        type: "cubit::f128::types::fixed::Fixed",
      },
      {
        name: "quote_token_address",
        type: "core::starknet::contract_address::ContractAddress",
      },
      {
        name: "base_token_address",
        type: "core::starknet::contract_address::ContractAddress",
      },
      {
        name: "option_type",
        type: "core::integer::u8",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::option_::OptionWithPremia",
    members: [
      {
        name: "option",
        type: "carmine_protocol::types::option_::Option_",
      },
      {
        name: "premia",
        type: "cubit::f128::types::fixed::Fixed",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::option_::OptionWithUsersPosition",
    members: [
      {
        name: "option",
        type: "carmine_protocol::types::option_::Option_",
      },
      {
        name: "position_size",
        type: "core::integer::u256",
      },
      {
        name: "value_of_position",
        type: "cubit::f128::types::fixed::Fixed",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::pool::Pool",
    members: [
      {
        name: "quote_token_address",
        type: "core::starknet::contract_address::ContractAddress",
      },
      {
        name: "base_token_address",
        type: "core::starknet::contract_address::ContractAddress",
      },
      {
        name: "option_type",
        type: "core::integer::u8",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::pool::PoolInfo",
    members: [
      {
        name: "pool",
        type: "carmine_protocol::types::pool::Pool",
      },
      {
        name: "lptoken_address",
        type: "core::starknet::contract_address::ContractAddress",
      },
      {
        name: "staked_capital",
        type: "core::integer::u256",
      },
      {
        name: "unlocked_capital",
        type: "core::integer::u256",
      },
      {
        name: "value_of_pool_position",
        type: "cubit::f128::types::fixed::Fixed",
      },
    ],
  },
  {
    type: "struct",
    name: "carmine_protocol::types::pool::UserPoolInfo",
    members: [
      {
        name: "value_of_user_stake",
        type: "core::integer::u256",
      },
      {
        name: "size_of_users_tokens",
        type: "core::integer::u256",
      },
      {
        name: "pool_info",
        type: "carmine_protocol::types::pool::PoolInfo",
      },
    ],
  },
  {
    type: "interface",
    name: "carmine_protocol::amm_interface::IAMM",
    items: [
      {
        type: "function",
        name: "trade_open",
        inputs: [
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "option_size",
            type: "core::integer::u128",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "limit_total_premia",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "tx_deadline",
            type: "core::integer::u64",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "trade_close",
        inputs: [
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "option_size",
            type: "core::integer::u128",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "limit_total_premia",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "tx_deadline",
            type: "core::integer::u64",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "trade_settle",
        inputs: [
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "option_size",
            type: "core::integer::u128",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "is_option_available",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
        ],
        outputs: [
          {
            type: "core::bool",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "set_trading_halt",
        inputs: [
          {
            name: "new_status",
            type: "core::bool",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_trading_halt",
        inputs: [],
        outputs: [
          {
            type: "core::bool",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "set_trading_halt_permission",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "permission",
            type: "core::bool",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_trading_halt_permission",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::bool",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "add_lptoken",
        inputs: [
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "volatility_adjustment_speed",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "max_lpool_bal",
            type: "core::integer::u256",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "add_option_both_sides",
        inputs: [
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_token_address_long",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_token_address_short",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "initial_volatility",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_option_token_address",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_lptokens_for_underlying",
        inputs: [
          {
            name: "pooled_token_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "underlying_amt",
            type: "core::integer::u256",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_underlying_for_lptokens",
        inputs: [
          {
            name: "lptoken_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "lpt_amt",
            type: "core::integer::u256",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_available_lptoken_addresses",
        inputs: [
          {
            name: "order_i",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_all_options",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::option_::Option_>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_all_non_expired_options_with_premia",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::option_::OptionWithPremia>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_option_with_position_of_user",
        inputs: [
          {
            name: "user_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::option_::OptionWithUsersPosition>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_all_lptoken_addresses",
        inputs: [],
        outputs: [
          {
            type: "core::array::Array::<core::starknet::contract_address::ContractAddress>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_value_of_pool_position",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_fees_percentage",
        inputs: [],
        outputs: [
          {
            type: "core::integer::u128",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_value_of_pool_expired_position",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_value_of_pool_non_expired_position",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_value_of_position",
        inputs: [
          {
            name: "option",
            type: "carmine_protocol::types::option_::Option_",
          },
          {
            name: "position_size",
            type: "core::integer::u128",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "current_volatility",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_all_poolinfo",
        inputs: [],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::pool::PoolInfo>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_user_pool_infos",
        inputs: [
          {
            name: "user",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::pool::UserPoolInfo>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "deposit_liquidity",
        inputs: [
          {
            name: "pooled_token_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "amount",
            type: "core::integer::u256",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "withdraw_liquidity",
        inputs: [
          {
            name: "pooled_token_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
          {
            name: "lp_token_amount",
            type: "core::integer::u256",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_unlocked_capital",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "expire_option_token_for_pool",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "set_max_option_size_percent_of_voladjspd",
        inputs: [
          {
            name: "max_opt_size_as_perc_of_vol_adjspd",
            type: "core::integer::u128",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_max_option_size_percent_of_voladjspd",
        inputs: [],
        outputs: [
          {
            type: "core::integer::u128",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_lpool_balance",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_max_lpool_balance",
        inputs: [
          {
            name: "lpt_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "set_max_lpool_balance",
        inputs: [
          {
            name: "lpt_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "max_lpool_bal",
            type: "core::integer::u256",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_pool_locked_capital",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u256",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_available_options",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "order_i",
            type: "core::integer::u32",
          },
        ],
        outputs: [
          {
            type: "carmine_protocol::types::option_::Option_",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_lptoken_address_for_given_option",
        inputs: [
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_type",
            type: "core::integer::u8",
          },
        ],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_pool_definition_from_lptoken_address",
        inputs: [
          {
            name: "lptoken_addres",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "carmine_protocol::types::pool::Pool",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_option_volatility",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_underlying_token_address",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_available_lptoken_addresses_usable_index",
        inputs: [
          {
            name: "starting_index",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "core::felt252",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_pool_volatility_adjustment_speed",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "set_pool_volatility_adjustment_speed",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "new_speed",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_option_position",
        inputs: [
          {
            name: "lptoken_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "option_side",
            type: "core::integer::u8",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        outputs: [
          {
            type: "core::integer::u128",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_total_premia",
        inputs: [
          {
            name: "option",
            type: "carmine_protocol::types::option_::Option_",
          },
          {
            name: "position_size",
            type: "core::integer::u256",
          },
          {
            name: "is_closing",
            type: "core::bool",
          },
        ],
        outputs: [
          {
            type: "(cubit::f128::types::fixed::Fixed, cubit::f128::types::fixed::Fixed)",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "black_scholes",
        inputs: [
          {
            name: "sigma",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "time_till_maturity_annualized",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "strike_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "underlying_price",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "risk_free_rate_annualized",
            type: "cubit::f128::types::fixed::Fixed",
          },
          {
            name: "is_for_trade",
            type: "core::bool",
          },
        ],
        outputs: [
          {
            type: "(cubit::f128::types::fixed::Fixed, cubit::f128::types::fixed::Fixed, core::bool)",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_current_price",
        inputs: [
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_terminal_price",
        inputs: [
          {
            name: "quote_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "base_token_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "maturity",
            type: "core::integer::u64",
          },
        ],
        outputs: [
          {
            type: "cubit::f128::types::fixed::Fixed",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "set_pragma_checkpoint",
        inputs: [
          {
            name: "key",
            type: "core::felt252",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "set_pragma_required_checkpoints",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "upgrade",
        inputs: [
          {
            name: "new_implementation",
            type: "core::starknet::class_hash::ClassHash",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "impl",
    name: "OwnableImpl",
    interface_name: "carmine_protocol::oz::access::interface::IOwnable",
  },
  {
    type: "interface",
    name: "carmine_protocol::oz::access::interface::IOwnable",
    items: [
      {
        type: "function",
        name: "owner",
        inputs: [],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "transfer_ownership",
        inputs: [
          {
            name: "new_owner",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "renounce_ownership",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "impl",
    name: "OwnableCamelOnlyImpl",
    interface_name:
      "carmine_protocol::oz::access::interface::IOwnableCamelOnly",
  },
  {
    type: "interface",
    name: "carmine_protocol::oz::access::interface::IOwnableCamelOnly",
    items: [
      {
        type: "function",
        name: "transferOwnership",
        inputs: [
          {
            name: "newOwner",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "renounceOwnership",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "constructor",
    name: "constructor",
    inputs: [
      {
        name: "owner",
        type: "core::starknet::contract_address::ContractAddress",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::oz::security::reentrancyguard::ReentrancyGuardComponent::Event",
    kind: "enum",
    variants: [],
  },
  {
    type: "event",
    name: "carmine_protocol::oz::access::ownable::OwnableComponent::OwnershipTransferred",
    kind: "struct",
    members: [
      {
        name: "previous_owner",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "new_owner",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::oz::access::ownable::OwnableComponent::Event",
    kind: "enum",
    variants: [
      {
        name: "OwnershipTransferred",
        type: "carmine_protocol::oz::access::ownable::OwnableComponent::OwnershipTransferred",
        kind: "nested",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::TradeOpen",
    kind: "struct",
    members: [
      {
        name: "caller",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "option_token",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "capital_transfered",
        type: "core::integer::u256",
        kind: "data",
      },
      {
        name: "option_tokens_minted",
        type: "core::integer::u256",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::TradeClose",
    kind: "struct",
    members: [
      {
        name: "caller",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "option_token",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "capital_transfered",
        type: "core::integer::u256",
        kind: "data",
      },
      {
        name: "option_tokens_burned",
        type: "core::integer::u256",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::TradeSettle",
    kind: "struct",
    members: [
      {
        name: "caller",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "option_token",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "capital_transfered",
        type: "core::integer::u256",
        kind: "data",
      },
      {
        name: "option_tokens_burned",
        type: "core::integer::u256",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::DepositLiquidity",
    kind: "struct",
    members: [
      {
        name: "caller",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "lp_token",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "capital_transfered",
        type: "core::integer::u256",
        kind: "data",
      },
      {
        name: "lp_tokens_minted",
        type: "core::integer::u256",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::WithdrawLiquidity",
    kind: "struct",
    members: [
      {
        name: "caller",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "lp_token",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "capital_transfered",
        type: "core::integer::u256",
        kind: "data",
      },
      {
        name: "lp_tokens_burned",
        type: "core::integer::u256",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::ExpireOptionTokenForPool",
    kind: "struct",
    members: [
      {
        name: "lptoken_address",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "option_side",
        type: "core::integer::u8",
        kind: "data",
      },
      {
        name: "strike_price",
        type: "cubit::f128::types::fixed::Fixed",
        kind: "data",
      },
      {
        name: "maturity",
        type: "core::integer::u64",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::amm_core::amm::AMM::Event",
    kind: "enum",
    variants: [
      {
        name: "ReentrancyGuardEvent",
        type: "carmine_protocol::oz::security::reentrancyguard::ReentrancyGuardComponent::Event",
        kind: "nested",
      },
      {
        name: "OwnableEvent",
        type: "carmine_protocol::oz::access::ownable::OwnableComponent::Event",
        kind: "nested",
      },
      {
        name: "TradeOpen",
        type: "carmine_protocol::amm_core::amm::AMM::TradeOpen",
        kind: "nested",
      },
      {
        name: "TradeClose",
        type: "carmine_protocol::amm_core::amm::AMM::TradeClose",
        kind: "nested",
      },
      {
        name: "TradeSettle",
        type: "carmine_protocol::amm_core::amm::AMM::TradeSettle",
        kind: "nested",
      },
      {
        name: "DepositLiquidity",
        type: "carmine_protocol::amm_core::amm::AMM::DepositLiquidity",
        kind: "nested",
      },
      {
        name: "WithdrawLiquidity",
        type: "carmine_protocol::amm_core::amm::AMM::WithdrawLiquidity",
        kind: "nested",
      },
      {
        name: "ExpireOptionTokenForPool",
        type: "carmine_protocol::amm_core::amm::AMM::ExpireOptionTokenForPool",
        kind: "nested",
      },
    ],
  },
  {
    type: "impl",
    name: "AuxContract",
    interface_name: "carmine_protocol::aux_contract::IAuxContract",
  },
  {
    type: "interface",
    name: "carmine_protocol::aux_contract::IAuxContract",
    items: [
      {
        type: "function",
        name: "get_all_non_expired_options_with_premia",
        inputs: [
          {
            name: "lpt_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::array::Array::<carmine_protocol::types::option_::OptionWithPremia>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_user_pool_info",
        inputs: [
          {
            name: "user",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "lpt_addr",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "carmine_protocol::types::pool::UserPoolInfo",
          },
        ],
        state_mutability: "view",
      },
    ],
  },
  {
    type: "event",
    name: "carmine_protocol::aux_contract::AuxContract::Event",
    kind: "enum",
    variants: [],
  },
] as const;
