// Auto-generated by generateGovernanceABI.ts
export const governanceAbi = [
  {
    type: "impl",
    name: "Governance",
    interface_name: "konoha::contract::IGovernance",
  },
  {
    type: "interface",
    name: "konoha::contract::IGovernance",
    items: [
      {
        type: "function",
        name: "get_governance_token_address",
        inputs: [],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
    ],
  },
  {
    type: "impl",
    name: "CarmineGovernance",
    interface_name: "amm_governance::contract::ICarmineGovernance",
  },
  {
    type: "interface",
    name: "amm_governance::contract::ICarmineGovernance",
    items: [
      {
        type: "function",
        name: "get_amm_address",
        inputs: [],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
    ],
  },
  {
    type: "impl",
    name: "Migrate",
    interface_name: "amm_governance::contract::IMigrate",
  },
  {
    type: "interface",
    name: "amm_governance::contract::IMigrate",
    items: [
      {
        type: "function",
        name: "add_custom_proposals",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "impl",
    name: "Airdrop",
    interface_name: "konoha::airdrop::IAirdrop",
  },
  {
    type: "interface",
    name: "konoha::airdrop::IAirdrop",
    items: [
      {
        type: "function",
        name: "claim",
        inputs: [
          {
            name: "claimee",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "amount",
            type: "core::integer::u128",
          },
          {
            name: "proof",
            type: "core::array::Array::<core::felt252>",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "impl",
    name: "Proposals",
    interface_name: "amm_governance::proposals::IProposals",
  },
  {
    type: "struct",
    name: "konoha::types::PropDetails",
    members: [
      {
        name: "payload",
        type: "core::felt252",
      },
      {
        name: "to_upgrade",
        type: "core::felt252",
      },
    ],
  },
  {
    type: "struct",
    name: "core::array::Span::<core::felt252>",
    members: [
      {
        name: "snapshot",
        type: "@core::array::Array::<core::felt252>",
      },
    ],
  },
  {
    type: "enum",
    name: "core::bool",
    variants: [
      {
        name: "False",
        type: "()",
      },
      {
        name: "True",
        type: "()",
      },
    ],
  },
  {
    type: "struct",
    name: "konoha::types::CustomProposalConfig",
    members: [
      {
        name: "target",
        type: "core::felt252",
      },
      {
        name: "selector",
        type: "core::felt252",
      },
      {
        name: "library_call",
        type: "core::bool",
      },
    ],
  },
  {
    type: "interface",
    name: "amm_governance::proposals::IProposals",
    items: [
      {
        type: "function",
        name: "vote",
        inputs: [
          {
            name: "prop_id",
            type: "core::felt252",
          },
          {
            name: "opinion",
            type: "core::felt252",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_proposal_details",
        inputs: [
          {
            name: "prop_id",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "konoha::types::PropDetails",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_vote_counts",
        inputs: [
          {
            name: "prop_id",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "(core::integer::u128, core::integer::u128)",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "submit_proposal",
        inputs: [
          {
            name: "payload",
            type: "core::felt252",
          },
          {
            name: "to_upgrade",
            type: "core::integer::u64",
          },
        ],
        outputs: [
          {
            type: "core::felt252",
          },
        ],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_proposal_status",
        inputs: [
          {
            name: "prop_id",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "core::felt252",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_live_proposals",
        inputs: [],
        outputs: [
          {
            type: "core::array::Array::<core::felt252>",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_user_voted",
        inputs: [
          {
            name: "user_address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "prop_id",
            type: "core::felt252",
          },
        ],
        outputs: [
          {
            type: "core::felt252",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "submit_custom_proposal",
        inputs: [
          {
            name: "custom_proposal_type",
            type: "core::integer::u32",
          },
          {
            name: "calldata",
            type: "core::array::Span::<core::felt252>",
          },
        ],
        outputs: [
          {
            type: "core::integer::u32",
          },
        ],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_custom_proposal_type",
        inputs: [
          {
            name: "i",
            type: "core::integer::u32",
          },
        ],
        outputs: [
          {
            type: "konoha::types::CustomProposalConfig",
          },
        ],
        state_mutability: "view",
      },
    ],
  },
  {
    type: "impl",
    name: "Upgrades",
    interface_name: "amm_governance::upgrades::IUpgrades",
  },
  {
    type: "interface",
    name: "amm_governance::upgrades::IUpgrades",
    items: [
      {
        type: "function",
        name: "apply_passed_proposal",
        inputs: [
          {
            name: "prop_id",
            type: "core::felt252",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
    ],
  },
  {
    type: "impl",
    name: "Staking",
    interface_name: "amm_governance::staking::IStaking",
  },
  {
    type: "struct",
    name: "amm_governance::staking::staking::Stake",
    members: [
      {
        name: "amount_staked",
        type: "core::integer::u128",
      },
      {
        name: "amount_voting_token",
        type: "core::integer::u128",
      },
      {
        name: "start_date",
        type: "core::integer::u64",
      },
      {
        name: "length",
        type: "core::integer::u64",
      },
      {
        name: "withdrawn",
        type: "core::bool",
      },
    ],
  },
  {
    type: "interface",
    name: "amm_governance::staking::IStaking",
    items: [
      {
        type: "function",
        name: "stake",
        inputs: [
          {
            name: "length",
            type: "core::integer::u64",
          },
          {
            name: "amount",
            type: "core::integer::u128",
          },
        ],
        outputs: [
          {
            type: "core::integer::u32",
          },
        ],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "unstake",
        inputs: [
          {
            name: "id",
            type: "core::integer::u32",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "unstake_airdrop",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "set_curve_point",
        inputs: [
          {
            name: "length",
            type: "core::integer::u64",
          },
          {
            name: "conversion_rate",
            type: "core::integer::u16",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "set_floating_token_address",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "initialize_floating_token_address",
        inputs: [],
        outputs: [],
        state_mutability: "external",
      },
      {
        type: "function",
        name: "get_floating_token_address",
        inputs: [],
        outputs: [
          {
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_stake",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
          {
            name: "stake_id",
            type: "core::integer::u32",
          },
        ],
        outputs: [
          {
            type: "amm_governance::staking::staking::Stake",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_total_voting_power",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u128",
          },
        ],
        state_mutability: "view",
      },
      {
        type: "function",
        name: "get_adjusted_voting_power",
        inputs: [
          {
            name: "address",
            type: "core::starknet::contract_address::ContractAddress",
          },
        ],
        outputs: [
          {
            type: "core::integer::u128",
          },
        ],
        state_mutability: "view",
      },
    ],
  },
  {
    type: "constructor",
    name: "constructor",
    inputs: [
      {
        name: "voting_token_class",
        type: "core::starknet::class_hash::ClassHash",
      },
      {
        name: "floating_token_class",
        type: "core::starknet::class_hash::ClassHash",
      },
      {
        name: "recipient",
        type: "core::starknet::contract_address::ContractAddress",
      },
    ],
  },
  {
    type: "event",
    name: "konoha::airdrop::airdrop::Claimed",
    kind: "struct",
    members: [
      {
        name: "address",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "received",
        type: "core::integer::u128",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "konoha::airdrop::airdrop::Event",
    kind: "enum",
    variants: [
      {
        name: "Claimed",
        type: "konoha::airdrop::airdrop::Claimed",
        kind: "nested",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::proposals::proposals::Proposed",
    kind: "struct",
    members: [
      {
        name: "prop_id",
        type: "core::felt252",
        kind: "data",
      },
      {
        name: "payload",
        type: "core::felt252",
        kind: "data",
      },
      {
        name: "to_upgrade",
        type: "core::integer::u64",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::proposals::proposals::Voted",
    kind: "struct",
    members: [
      {
        name: "prop_id",
        type: "core::felt252",
        kind: "data",
      },
      {
        name: "voter",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "opinion",
        type: "core::felt252",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::proposals::proposals::Event",
    kind: "enum",
    variants: [
      {
        name: "Proposed",
        type: "amm_governance::proposals::proposals::Proposed",
        kind: "nested",
      },
      {
        name: "Voted",
        type: "amm_governance::proposals::proposals::Voted",
        kind: "nested",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::upgrades::upgrades::Upgraded",
    kind: "struct",
    members: [
      {
        name: "prop_id",
        type: "core::integer::u64",
        kind: "data",
      },
      {
        name: "upgrade_type",
        type: "core::integer::u64",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::upgrades::upgrades::Event",
    kind: "enum",
    variants: [
      {
        name: "Upgraded",
        type: "amm_governance::upgrades::upgrades::Upgraded",
        kind: "nested",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::staking::staking::Staked",
    kind: "struct",
    members: [
      {
        name: "user",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "stake_id",
        type: "core::integer::u32",
        kind: "data",
      },
      {
        name: "amount",
        type: "core::integer::u128",
        kind: "data",
      },
      {
        name: "amount_voting_token",
        type: "core::integer::u128",
        kind: "data",
      },
      {
        name: "start_date",
        type: "core::integer::u64",
        kind: "data",
      },
      {
        name: "length",
        type: "core::integer::u64",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::staking::staking::Unstaked",
    kind: "struct",
    members: [
      {
        name: "user",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "stake_id",
        type: "core::integer::u32",
        kind: "data",
      },
      {
        name: "amount",
        type: "core::integer::u128",
        kind: "data",
      },
      {
        name: "amount_voting_token",
        type: "core::integer::u128",
        kind: "data",
      },
      {
        name: "start_date",
        type: "core::integer::u64",
        kind: "data",
      },
      {
        name: "length",
        type: "core::integer::u64",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::staking::staking::UnstakedAirdrop",
    kind: "struct",
    members: [
      {
        name: "user",
        type: "core::starknet::contract_address::ContractAddress",
        kind: "data",
      },
      {
        name: "amount",
        type: "core::integer::u128",
        kind: "data",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::staking::staking::Event",
    kind: "enum",
    variants: [
      {
        name: "Staked",
        type: "amm_governance::staking::staking::Staked",
        kind: "nested",
      },
      {
        name: "Unstaked",
        type: "amm_governance::staking::staking::Unstaked",
        kind: "nested",
      },
      {
        name: "UnstakedAirdrop",
        type: "amm_governance::staking::staking::UnstakedAirdrop",
        kind: "nested",
      },
    ],
  },
  {
    type: "event",
    name: "amm_governance::contract::Governance::Event",
    kind: "enum",
    variants: [
      {
        name: "AirdropEvent",
        type: "konoha::airdrop::airdrop::Event",
        kind: "nested",
      },
      {
        name: "ProposalsEvent",
        type: "amm_governance::proposals::proposals::Event",
        kind: "nested",
      },
      {
        name: "UpgradesEvent",
        type: "amm_governance::upgrades::upgrades::Event",
        kind: "nested",
      },
      {
        name: "StakingEvent",
        type: "amm_governance::staking::staking::Event",
        kind: "nested",
      },
    ],
  },
] as const;
